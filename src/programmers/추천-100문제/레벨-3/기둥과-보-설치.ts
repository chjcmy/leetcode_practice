/*
 * 프로그래머스 - 기둥과 보 설치
 * https://school.programmers.co.kr/learn/courses/30/lessons/60061
 * Level 3
 */

/*
  문제 설명:
  2차원 가상 벽면에 기둥과 보를 설치하거나 삭제하는 작업을 시뮬레이션하는 문제입니다. 
  기둥과 보는 길이가 1인 선분으로 표현되며, 특정 규칙에 따라 설치 및 삭제가 가능합니다.

  주요 규칙:
  1. 구조물 종류 및 좌표:
    - 구조물은 교차점 좌표 (x, y)를 기준으로 설치됩니다.
    - 기둥 (0): (x, y)에서 위쪽 방향으로 설치됩니다.
    - 보 (1): (x, y)에서 오른쪽 방향으로 설치됩니다.

  2. 설치 조건:
    - 기둥:
      - 바닥 위에 있어야 합니다. (y = 0)
      - 다른 기둥 위에 있어야 합니다. (즉, (x, y-1)에 기둥이 있어야 함)
      - 보의 한쪽 끝 부분 위에 있어야 합니다. (즉, (x-1, y)에 보가 있거나 (x, y)에 보가 있어야 함)
    - 보:
      - 한쪽 끝 부분이 기둥 위에 있어야 합니다. (즉, (x, y-1)에 기둥이 있거나 (x+1, y-1)에 기둥이 있어야 함)
      - 양쪽 끝 부분이 동시에 다른 보와 연결되어 있어야 합니다. (즉, (x-1, y)에 보가 있고 (x+1, y)에 보가 있어야 함)

  3. 삭제 조건:
    - 특정 기둥이나 보를 삭제했을 때, 남아있는 모든 기둥과 보가 위의 설치 조건을 만족해야 합니다.
    - 만약 삭제 후 하나라도 조건을 만족하지 않는 구조물이 있다면, 해당 삭제는 유효하지 않으며 삭제하려던 구조물은 다시 설치됩니다.

  build_frame이라는 2차원 배열이 주어집니다. 각 원소는 [x, y, a, b] 형태입니다.
  - x, y: 구조물을 설치하거나 삭제할 교차점의 좌표.
  - a: 구조물의 종류 (0: 기둥, 1: 보).
  - b: 설치 또는 삭제 여부 (0: 삭제, 1: 설치).
  벽면의 크기 n이 함께 주어집니다.

  모든 명령을 수행한 후 현재까지 설치된 구조물들의 상태를 2차원 배열로 return 합니다.
  - 반환되는 배열은 [x, y, type] 형태의 원소들로 구성됩니다.
  - 정렬 순서는 다음과 같습니다:
    1. x 좌표를 기준으로 오름차순 정렬.
    2. x 좌표가 같을 경우 y 좌표를 기준으로 오름차순 정렬.
    3. x, y 좌표가 모두 같을 경우 기둥(0)이 보(1)보다 앞에 오도록 정렬.

  제한 사항:
  - n은 5 이상 100 이하인 자연수입니다.
  - build_frame의 길이는 1 이상 1,000 이하입니다.
*/

function solution(n: number, build_frame: number[][]): number[][] {
  let answer: number[][] = [];
  // 문제 풀이
  return answer;
}

// 예제 테스트
console.log(`예제 1: ${solution(5, [[1,0,0,1],[1,1,1,1],[2,1,0,1],[2,2,1,1],[5,0,0,1],[5,1,0,1],[4,1,0,1],[4,2,1,1]])} `); // [[0,0,0],[0,1,1],[1,1,1],[2,1,1],[3,1,1],[4,0,0],[4,1,1],[5,0,0],[5,1,1]]
console.log(`예제 2: ${solution(5, [[0,0,0,1],[2,0,0,1],[4,0,0,1],[0,1,1,1],[1,1,1,1],[2,1,1,1],[3,1,1,1],[2,0,0,0],[1,1,1,0],[2,2,0,1]])} `); // [[0,0,0],[0,1,1],[1,1,1],[2,1,1],[3,1,1],[4,0,0]]
