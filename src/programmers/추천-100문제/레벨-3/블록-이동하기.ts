/*
 * 프로그래머스 - 블록 이동하기
 * https://school.programmers.co.kr/learn/courses/30/lessons/60063
 * Level 3
 */

/*
  문제 설명:
  2x1 크기의 로봇을 N x N 크기의 지도에서 움직여 (N, N) 위치까지 이동하는 데 걸리는 최소 시간을 구하는 문제입니다.

  - 지도: N x N 크기의 지도는 "0"과 "1"로 이루어져 있습니다. "0"은 빈칸을, "1"은 벽을 나타냅니다.
  - 로봇: 2x1 크기의 로봇입니다.
  - 시작 위치: 로봇은 처음에 (1, 1)과 (1, 2) 위치에 가로 방향으로 놓여 있는 상태로 시작합니다.
  - 목표: 로봇이 차지하는 두 칸 중 어느 한 칸이라도 (N, N) 위치에 도착하면 됩니다.

  이동 규칙:
  - 상하좌우 이동: 로봇은 현재 놓여있는 상태를 유지하면서 상하좌우로 한 칸씩 이동할 수 있습니다.
  - 회전: 로봇은 90도씩 회전할 수 있습니다. 로봇이 차지하는 두 칸 중 어느 칸이든 축이 될 수 있지만, 회전하는 방향(축이 되는 칸으로부터 대각선 방향에 있는 칸)에는 벽이 없어야 합니다.

  제한 사항:
  - 로봇은 벽이 있는 칸 또는 지도 밖으로는 이동할 수 없습니다.
  - 로봇이 한 칸 이동하거나 90도 회전하는 데는 정확히 1초가 걸립니다.
  - board의 한 변의 길이는 5 이상 100 이하입니다.
  - board의 원소는 0 또는 1입니다.
  - 로봇이 처음에 놓여 있는 칸 (1, 1), (1, 2)는 항상 0으로 주어집니다.
  - 로봇이 항상 목적지에 도착할 수 있는 경우만 입력으로 주어집니다.
*/

function solution(board: number[][]): number {
  let answer = 0;
  // 문제 풀이
  return answer;
}

// 예제 테스트
console.log(`예제 1: ${solution([[0, 0, 0, 1, 1],[0, 0, 0, 1, 0],[0, 0, 0, 0, 0],[0, 0, 1, 1, 0],[0, 0, 0, 0, 0]])} `); // 7
