/*
 * 프로그래머스 - 동굴 탐험
 * https://school.programmers.co.kr/learn/courses/30/lessons/67259
 * Level 4
 */

/*
  문제 설명:
  n개의 방으로 이루어진 지하 동굴을 탐험합니다. 모든 방에는 0부터 n-1까지 번호가 붙어 있으며, 동굴 입구는 0번 방과 연결되어 있습니다. 
  각 방은 양방향 통로로 연결되어 있고, 서로 다른 두 방을 직접 연결하는 통로는 오직 하나입니다. 
  임의의 서로 다른 두 방 사이의 최단 경로는 딱 한 가지만 존재하며, 임의의 두 방 사이에 이동이 불가능한 경우는 없습니다.

  탐험 계획 및 제약사항:
  1. 모든 방 방문: 모든 방을 적어도 한 번은 방문해야 합니다.
  2. 방문 순서 제약: 특정 방은 방문하기 전에 반드시 먼저 방문해야 하는 방이 정해져 있습니다. 
     이는 A번 방은 방문하기 전에 반드시 B번 방을 먼저 방문해야 한다는 의미입니다. (즉, B → A 순서로 방문해야 함)

  n: 방의 개수 (정수)
  path: 동굴의 각 통로들이 연결하는 두 방의 번호가 담긴 2차원 정수 배열. path[i] = [room1, room2]는 room1과 room2가 연결되어 있음을 의미합니다.
  order: 방문 순서 제약이 있는 방들의 번호가 담긴 2차원 정수 배열. order[i] = [A, B]는 A번 방을 방문한 후에 B번 방을 방문할 수 있음을 의미합니다.

  모든 방을 위 규칙에 따라 방문할 수 있다면 true를, 없다면 false를 return 합니다.

  제한 사항:
  - n은 2 이상 200,000 이하인 자연수입니다.
  - path의 길이는 n-1입니다.
  - order의 길이는 1 이상 n 이하입니다.
*/

function solution(n: number, path: number[][], order: number[][]): boolean {
  let answer = false;
  // 문제 풀이
  return answer;
}

// 예제 테스트
console.log(`예제 1: ${solution(9, [[0,1],[0,3],[0,7],[8,1],[3,6],[1,2],[4,7],[7,5]], [[8,5],[6,7],[4,1]])} `); // true
console.log(`예제 2: ${solution(9, [[0,1],[0,3],[0,7],[8,1],[3,6],[1,2],[4,7],[7,5]], [[8,5],[6,7],[1,4]])} `); // false
